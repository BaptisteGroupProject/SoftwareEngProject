type UserLocation @model {
    id: ID!
    username: String
    latitude: Float
    longitude: Float
    location: String
    time: String
}
type LocationPlaceByJson @model {
    id: ID!
    firstPostcode: String
    locationItems: [String!]!
}

type LocationPlace @model {
    id: ID!
    firstPostcode: String
    locationItems: [String!]!
}

type PricePaidDataJson @model {
    id: ID!
    postcode: String
    locationPaidB: [String!]!
}

type PricePaidDataJsonTest @model
@key(name: "postcode-index", fields: ["postcode"]){
    id: ID!
    postcode: String
    locationPaidB: [String!]!
}

type PricePaidJson @model @key(name: "postcode-index", fields: ["postcode"], queryField:"queryByPostcode"){
    id: ID!
    postcode:String
    locationPaid: [String!]!
}

type LocationPricePaidData @model {
    id:ID!
    price: Int
    transferDate: String
    postcode: String
    propertyType: String
    newOrOld: String
    duration: String
    paon: String
    saon: String
    strees: String
    locality: String
    town: String
    district: String
    country: String
    categoryType: String
    recordStatus: String
}

type CrimeData @model
@key(name: "latng-index", fields: ["longitude","latitude"], queryField:"byPosition"){
    crimeId: ID!
    month: String
    reportedBy: String
    fallsWithin: String
    longitude: Float
    latitude: Float
    location: String
    LSOACode: String
    LSOAName: String
    CrimeType: String
    lastOutCome: String
    Context: String
}

type UKCrimeData @model {
    crimeId: ID!
    month: String
    reportedBy: String
    fallsWithin: String
    longitude: Float
    latitude: Float
    location: String
    LSOACode: String
    LSOAName: String
    CrimeType: String
    lastOutCome: String
    Context: String
}
