package com.ASETP.project.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ASETP.project.model.LocationPlaces;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_PLACES".
*/
public class LocationPlacesDao extends AbstractDao<LocationPlaces, String> {

    public static final String TABLENAME = "LOCATION_PLACES";

    /**
     * Properties of entity LocationPlaces.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Postcode = new Property(0, String.class, "postcode", true, "POSTCODE");
        public final static Property Longitude = new Property(1, float.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(2, float.class, "latitude", false, "LATITUDE");
    }


    public LocationPlacesDao(DaoConfig config) {
        super(config);
    }
    
    public LocationPlacesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationPlaces entity) {
        stmt.clearBindings();
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(1, postcode);
        }
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindDouble(3, entity.getLatitude());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationPlaces entity) {
        stmt.clearBindings();
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(1, postcode);
        }
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindDouble(3, entity.getLatitude());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocationPlaces readEntity(Cursor cursor, int offset) {
        LocationPlaces entity = new LocationPlaces( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // postcode
            cursor.getFloat(offset + 1), // longitude
            cursor.getFloat(offset + 2) // latitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationPlaces entity, int offset) {
        entity.setPostcode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLongitude(cursor.getFloat(offset + 1));
        entity.setLatitude(cursor.getFloat(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocationPlaces entity, long rowId) {
        return entity.getPostcode();
    }
    
    @Override
    public String getKey(LocationPlaces entity) {
        if(entity != null) {
            return entity.getPostcode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationPlaces entity) {
        return entity.getPostcode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
